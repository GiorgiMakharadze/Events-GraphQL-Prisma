type Query {
  getUsers: [User!]!
  getUser(id: String!): User
  getEvents: [Event!]!
  getEvent(id: String!): Event
}

type Mutation {
  register(data: RegisterUserInput!): User!
  updateUser(data: UpdateUserInput!): User!
  deleteUser: User!
  createEvent(data: CreateEventInput!): Event!
  updateEvent(id: String!, data: UpdateEventInput!): Event!
  deleteEvent(id: String!): Event!
  expressInterest(eventId: String!): Event!
  markWillAttend(eventId: String!): Event!
}

input RegisterUserInput {
  username: String!
  email: String!
  password: String!
  firstName: String
  lastName: String
  profilePicture: String
}

input UpdateUserInput {
  username: String
  email: String
  password: String
  role: Role
  firstName: String
  lastName: String
  profilePicture: String
}

input CreateEventInput {
  name: String!
  interested: Int = 0
  willAttend: Int = 0
  place: String!
  description: String!
  date: String!
}

input UpdateEventInput {
  name: String
  interested: Int
  willAttend: Int
  place: String
  description: String!
  date: String
}

type User {
  id: String!
  username: String!
  email: String!
  role: Role!
  firstName: String
  lastName: String
  profilePicture: String
  password: String
  events: [Event!]!
  createdAt: String!
  updatedAt: String!
}

type Event {
  id: String!
  name: String!
  interested: Int!
  willAttend: Int!
  description: String!
  place: String!
  date: String!
  author: User!
  createdAt: String!
  updatedAt: String!
}

enum Role {
  USER
  MAIN_ADMIN
  ADMIN
}
